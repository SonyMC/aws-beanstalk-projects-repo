{"version":3,"sources":["Constants.js","components/todo/AuthenticationService.js","components/todo/AuthenticatedRoute.jsx","components/todo/LoginComponent.jsx","api/todo/TodoDataService.js","components/todo/ListTodosComponent.jsx","components/todo/ErrorComponent.jsx","components/todo/HeaderComponent.jsx","components/todo/FooterComponent.jsx","components/todo/LogoutComponent.jsx","api/todo/HelloWorldService.js","components/todo/WelcomeComponent.jsx","components/todo/TodoComponent.jsx","components/todo/TodoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["API_URL","JPA_API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","executeBasicAuthenticationService","username","password","axios","get","headers","authorization","this","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","token","createJWTToken","logout","removeItem","isUserLoggedIn","getItem","getLoggedInUserName","user","interceptors","request","use","config","AuthenticatedRoute","Component","render","AuthenticationService","Route","props","Redirect","to","LoginComponent","constructor","super","state","hasLoginFailed","showSuccessMessage","handleChange","bind","loginClicked","event","setState","target","name","value","then","response","data","history","push","catch","className","type","onChange","onClick","retrieveAllTodos","retrieveTodo","id","deleteTodo","delete","updateTodo","todo","put","createTodo","ListTodosComponent","console","log","todos","message","deleteTodoClicked","updateTodoClicked","addTodoClicked","refreshTodos","componentWillUnmount","shouldComponentUpdate","nextProps","nextState","componentDidMount","TodoDataService","class","map","key","description","moment","targetDate","format","done","toString","ErrorComponent","HeaderComponent","href","Link","FooterComponent","LogoutComponent","executeHelloWorldService","executeHelloWorldBeanService","executeHelloWorldPathVariableService","WelcomeComponent","retrieveWelcomeMessage","welcomeMessage","handleSuccessfulResponse","handleError","match","params","HelloWorldService","error","errorMessage","TodoComponent","Date","onSubmit","validate","values","errors","length","isValid","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","TodoApp","Switch","path","exact","App","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAEO,MAAMA,EAAU,yFACVC,EAAW,UAAMD,EAAN,QCAXE,EAAmC,oBAkEjC,UAhEf,MAEIC,kCAAkCC,EAAUC,GACxC,OAAOC,IAAMC,IAAN,UAAaP,EAAb,cACH,CAAEQ,QAAS,CAAEC,cAAeC,KAAKC,qBAAqBP,EAAUC,MAGxEO,gCAAgCR,EAAUC,GACtC,OAAOC,IAAMO,KAAN,UAAcb,EAAd,iBAAsC,CACzCI,WACAC,aAIRM,qBAAqBP,EAAUC,GAC3B,MAAO,SAAWS,OAAOC,KAAKX,EAAW,IAAMC,GAGnDW,wBAAwBZ,EAAUC,GAG9BY,eAAeC,QAAQhB,EAAkCE,GACzDM,KAAKS,uBAAuBT,KAAKC,qBAAqBP,EAAUC,IAGpEe,8BAA8BhB,EAAUiB,GACpCJ,eAAeC,QAAQhB,EAAkCE,GACzDM,KAAKS,uBAAuBT,KAAKY,eAAeD,IAGpDC,eAAeD,GACX,MAAO,UAAYA,EAIvBE,SACIN,eAAeO,WAAWtB,GAG9BuB,iBAEI,OAAa,OADFR,eAAeS,QAAQxB,GAKtCyB,sBACI,IAAIC,EAAOX,eAAeS,QAAQxB,GAClC,OAAa,OAAT0B,EAAsB,GACnBA,EAGXT,uBAAuBE,GAEnBf,IAAMuB,aAAaC,QAAQC,KACtBC,IACOtB,KAAKe,mBACLO,EAAOxB,QAAQC,cAAgBY,GAE5BW,OC3DvB,MAAMC,UAA2BC,YAC7BC,SACI,OAAIC,EAAsBX,iBACf,kBAACY,EAAA,EAAU3B,KAAK4B,OAEhB,kBAACC,EAAA,EAAD,CAAUC,GAAG,YAMjBP,QCZf,MAAMQ,UAAuBP,YAEzBQ,YAAYJ,GACRK,MAAML,GAEN5B,KAAKkC,MAAQ,CACTxC,SAAU,cACVC,SAAU,GACVwC,gBAAgB,EAChBC,oBAAoB,GAIxBpC,KAAKqC,aAAerC,KAAKqC,aAAaC,KAAKtC,MAC3CA,KAAKuC,aAAevC,KAAKuC,aAAaD,KAAKtC,MAG/CqC,aAAaG,GAETxC,KAAKyC,SACD,CACI,CAACD,EAAME,OAAOC,MACRH,EAAME,OAAOE,QAoB/BL,eAsBIb,EACKxB,gCAAgCF,KAAKkC,MAAMxC,SAAUM,KAAKkC,MAAMvC,UAChEkD,MAAMC,IACHpB,EAAsBhB,8BAA8BV,KAAKkC,MAAMxC,SAAUoD,EAASC,KAAKpC,OACvFX,KAAK4B,MAAMoB,QAAQC,KAAnB,mBAAoCjD,KAAKkC,MAAMxC,cAChDwD,OAAM,KACLlD,KAAKyC,SAAS,CAAEL,oBAAoB,IACpCpC,KAAKyC,SAAS,CAAEN,gBAAgB,OAK5CV,SACI,OACI,6BACI,qCACA,yBAAK0B,UAAU,aAEVnD,KAAKkC,MAAMC,gBAAkB,yBAAKgB,UAAU,uBAAf,uBAC7BnD,KAAKkC,MAAME,oBAAsB,gDAHtC,cAKe,2BAAOgB,KAAK,OAAOT,KAAK,WAAWC,MAAO5C,KAAKkC,MAAMxC,SAAU2D,SAAUrD,KAAKqC,eAL7F,aAMc,2BAAOe,KAAK,WAAWT,KAAK,WAAWC,MAAO5C,KAAKkC,MAAMvC,SAAU0D,SAAUrD,KAAKqC,eAC5F,4BAAQc,UAAU,kBAAkBG,QAAStD,KAAKuC,cAAlD,YAOLR,QCjEA,UA7Bf,MAEIwB,iBAAiBZ,GAEb,OAAO/C,IAAMC,IAAN,UAAaN,EAAb,kBAAkCoD,EAAlC,WAGXa,aAAab,EAAMc,GAEf,OAAO7D,IAAMC,IAAN,UAAaN,EAAb,kBAAkCoD,EAAlC,kBAAgDc,IAG3DC,WAAWf,EAAMc,GAEb,OAAO7D,IAAM+D,OAAN,UAAgBpE,EAAhB,kBAAqCoD,EAArC,kBAAmDc,IAG9DG,WAAWjB,EAAMc,EAAII,GAEjB,OAAOjE,IAAMkE,IAAN,UAAavE,EAAb,kBAAkCoD,EAAlC,kBAAgDc,GAAMI,GAGjEE,WAAWpB,EAAMkB,GAEb,OAAOjE,IAAMO,KAAN,UAAcZ,EAAd,kBAAmCoD,EAAnC,WAAkDkB,K,iBCtBjE,MAAMG,UAA2BxC,YAC7BQ,YAAYJ,GACRqC,QAAQC,IAAI,eACZjC,MAAML,GACN5B,KAAKkC,MAAQ,CACTiC,MAAO,GACPC,QAAS,MAEbpE,KAAKqE,kBAAoBrE,KAAKqE,kBAAkB/B,KAAKtC,MACrDA,KAAKsE,kBAAoBtE,KAAKsE,kBAAkBhC,KAAKtC,MACrDA,KAAKuE,eAAiBvE,KAAKuE,eAAejC,KAAKtC,MAC/CA,KAAKwE,aAAexE,KAAKwE,aAAalC,KAAKtC,MAG/CyE,uBACIR,QAAQC,IAAI,wBAGhBQ,sBAAsBC,EAAWC,GAI7B,OAHAX,QAAQC,IAAI,yBACZD,QAAQC,IAAIS,GACZV,QAAQC,IAAIU,IACL,EAGXC,oBACIZ,QAAQC,IAAI,qBACZlE,KAAKwE,eACLP,QAAQC,IAAIlE,KAAKkC,OAGrBsC,eACI,IAAI9E,EAAWgC,EAAsBT,sBACrC6D,EAAgBvB,iBAAiB7D,GAC5BmD,MACGC,IAEI9C,KAAKyC,SAAS,CAAE0B,MAAOrB,EAASC,UAKhDsB,kBAAkBZ,GACd,IAAI/D,EAAWgC,EAAsBT,sBAErC6D,EAAgBpB,WAAWhE,EAAU+D,GAChCZ,MACGC,IACI9C,KAAKyC,SAAS,CAAE2B,QAAQ,kBAAD,OAAoBX,EAApB,iBACvBzD,KAAKwE,kBAMrBD,iBACIvE,KAAK4B,MAAMoB,QAAQC,KAAnB,aAGJqB,kBAAkBb,GACdQ,QAAQC,IAAI,UAAYT,GACxBzD,KAAK4B,MAAMoB,QAAQC,KAAnB,iBAAkCQ,IActChC,SAEI,OADAwC,QAAQC,IAAI,UAER,6BACI,0CACClE,KAAKkC,MAAMkC,SAAW,yBAAKW,MAAM,uBAAuB/E,KAAKkC,MAAMkC,SACpE,yBAAKjB,UAAU,aACX,2BAAOA,UAAU,SACb,+BACI,4BACI,2CACA,2CACA,4CACA,sCACA,wCAGR,+BAEQnD,KAAKkC,MAAMiC,MAAMa,KACbnB,GACI,wBAAIoB,IAAKpB,EAAKJ,IACV,4BAAKI,EAAKqB,aACV,4BAAKC,IAAOtB,EAAKuB,YAAYC,OAAO,eACpC,4BAAKxB,EAAKyB,KAAKC,YACf,4BAAI,4BAAQpC,UAAU,kBAAkBG,QAAS,IAAMtD,KAAKsE,kBAAkBT,EAAKJ,KAA/E,WACJ,4BAAI,4BAAQN,UAAU,kBAAkBG,QAAS,IAAMtD,KAAKqE,kBAAkBR,EAAKJ,KAA/E,gBAM5B,yBAAKN,UAAU,OACX,4BAAQA,UAAU,kBAAkBG,QAAStD,KAAKuE,gBAAlD,WAQTP,QCnHAwB,MAJf,WACI,OAAO,+G,QCEX,MAAMC,UAAwBjE,YAC1BC,SACI,MAAMV,EAAiBW,EAAsBX,iBAG7C,OACI,gCACI,yBAAKoC,UAAU,+CACX,6BAAK,uBAAGuC,KAAK,6BAA6BvC,UAAU,gBAA/C,gBACL,wBAAIA,UAAU,cACTpC,GAAkB,4BAAI,kBAAC4E,EAAA,EAAD,CAAMxC,UAAU,WAAWrB,GAAG,wBAA9B,SACtBf,GAAkB,4BAAI,kBAAC4E,EAAA,EAAD,CAAMxC,UAAU,WAAWrB,GAAG,UAA9B,WAE3B,wBAAIqB,UAAU,mDACRpC,GAAkB,4BAAI,kBAAC4E,EAAA,EAAD,CAAMxC,UAAU,WAAWrB,GAAG,UAA9B,UACvBf,GAAkB,4BAAI,kBAAC4E,EAAA,EAAD,CAAMxC,UAAU,WAAWrB,GAAG,UAAUwB,QAAS5B,EAAsBb,QAAvE,eAQhC4E,QC1Bf,MAAMG,UAAwBpE,YAC1BC,SACI,OACI,4BAAQ0B,UAAU,UACd,0BAAMA,UAAU,cAAhB,2CAMDyC,QCVf,MAAMC,UAAwBrE,YAC1BC,SACI,OACI,oCACI,kDACA,yBAAK0B,UAAU,aAAf,0CAQD0C,QCmBA,UA/Bf,MAEIC,2BAEI,OAAOlG,IAAMC,IAAN,UAAaP,EAAb,iBAGXyG,+BAEI,OAAOnG,IAAMC,IAAN,UAAaP,EAAb,sBAGX0G,qCAAqCrD,GAOjC,OAAO/C,IAAMC,IAAN,UAAaP,EAAb,sCAAkDqD,MClBjE,MAAMsD,UAAyBzE,YAE3BQ,YAAYJ,GACRK,MAAML,GACN5B,KAAKkG,uBAAyBlG,KAAKkG,uBAAuB5D,KAAKtC,MAC/DA,KAAKkC,MAAQ,CACTiE,eAAgB,IAEpBnG,KAAKoG,yBAA2BpG,KAAKoG,yBAAyB9D,KAAKtC,MACnEA,KAAKqG,YAAcrG,KAAKqG,YAAY/D,KAAKtC,MAG7CyB,SACI,OACI,oCACI,wCACA,yBAAK0B,UAAU,aAAf,WACanD,KAAK4B,MAAM0E,MAAMC,OAAO5D,KADrC,+BAE8B,kBAACgD,EAAA,EAAD,CAAM7D,GAAG,UAAT,QAF9B,KAIA,yBAAKqB,UAAU,aAAf,kDAEI,4BAAQG,QAAStD,KAAKkG,uBAClB/C,UAAU,mBADd,wBAGJ,yBAAKA,UAAU,aACVnD,KAAKkC,MAAMiE,iBAO5BD,yBAOIM,EAAkBR,qCAAqChG,KAAK4B,MAAM0E,MAAMC,OAAO5D,MAC1EE,MAAKC,GAAY9C,KAAKoG,yBAAyBtD,KAC/CI,OAAMuD,GAASzG,KAAKqG,YAAYI,KAGzCL,yBAAyBtD,GACrBmB,QAAQC,IAAIpB,GACZ9C,KAAKyC,SAAS,CAAE0D,eAAgBrD,EAASC,KAAKqB,UAGlDiC,YAAYI,GAERxC,QAAQC,IAAIuC,EAAM3D,UAElB,IAAI4D,EAAe,GAEfD,EAAMrC,UACNsC,GAAgBD,EAAMrC,SAEtBqC,EAAM3D,UAAY2D,EAAM3D,SAASC,OACjC2D,GAAgBD,EAAM3D,SAASC,KAAKqB,SAGxCpE,KAAKyC,SAAS,CAAE0D,eAAgBO,KAMzBT,Q,QCnEf,MAAMU,UAAsBnF,YACxBQ,YAAYJ,GACRK,MAAML,GAEN5B,KAAKkC,MAAQ,CACTuB,GAAIzD,KAAK4B,MAAM0E,MAAMC,OAAO9C,GAC5ByB,YAAa,GACbE,WAAYD,IAAO,IAAIyB,MAAQvB,OAAO,eAG1CrF,KAAK6G,SAAW7G,KAAK6G,SAASvE,KAAKtC,MACnCA,KAAK8G,SAAW9G,KAAK8G,SAASxE,KAAKtC,MAIvC6E,oBAEI,IAAuB,IAAnB7E,KAAKkC,MAAMuB,GACX,OAGJ,IAAI/D,EAAWgC,EAAsBT,sBAErC6D,EAAgBtB,aAAa9D,EAAUM,KAAKkC,MAAMuB,IAC7CZ,MAAKC,GAAY9C,KAAKyC,SAAS,CAC5ByC,YAAapC,EAASC,KAAKmC,YAC3BE,WAAYD,IAAOrC,EAASC,KAAKqC,YAAYC,OAAO,kBAIhEyB,SAASC,GACL,IAAIC,EAAS,GAWb,OAVKD,EAAO7B,YAED6B,EAAO7B,YAAY+B,OAAS,IACnCD,EAAO9B,YAAc,6CAFrB8B,EAAO9B,YAAc,sBAKpBC,IAAO4B,EAAO3B,YAAY8B,YAC3BF,EAAO5B,WAAa,6BAGjB4B,EAIXH,SAASE,GACL,IAAIrH,EAAWgC,EAAsBT,sBAEjC4C,EAAO,CACPJ,GAAIzD,KAAKkC,MAAMuB,GACfyB,YAAa6B,EAAO7B,YACpBE,WAAY2B,EAAO3B,aAGA,IAAnBpF,KAAKkC,MAAMuB,GACXqB,EAAgBf,WAAWrE,EAAUmE,GAChChB,MAAK,IAAM7C,KAAK4B,MAAMoB,QAAQC,KAAK,YAExC6B,EAAgBlB,WAAWlE,EAAUM,KAAKkC,MAAMuB,GAAII,GAC/ChB,MAAK,IAAM7C,KAAK4B,MAAMoB,QAAQC,KAAK,YAG5CgB,QAAQC,IAAI6C,GAGhBtF,SAAU,IAAD,EAE6BzB,KAAKkC,MAAjCgD,EAFD,EAECA,YAAaE,EAFd,EAEcA,WAGnB,OACI,6BACI,oCACA,yBAAKjC,UAAU,aACX,kBAAC,IAAD,CACIgE,cAAe,CAAEjC,cAAaE,cAC9ByB,SAAU7G,KAAK6G,SACfO,kBAAkB,EAClBC,gBAAgB,EAChBP,SAAU9G,KAAK8G,SACfQ,oBAAoB,IAGf1F,GACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAce,KAAK,cAAc4E,UAAU,MACvCpE,UAAU,wBACd,kBAAC,IAAD,CAAcR,KAAK,aAAa4E,UAAU,MACtCpE,UAAU,wBACd,8BAAUA,UAAU,cAChB,8CACA,kBAAC,IAAD,CAAOA,UAAU,eAAeC,KAAK,OAAOT,KAAK,iBAErD,8BAAUQ,UAAU,cAChB,8CACA,kBAAC,IAAD,CAAOA,UAAU,eAAeC,KAAK,OAAOT,KAAK,gBAErD,4BAAQQ,UAAU,kBAAkBC,KAAK,UAAzC,cAYrBuD,QCxGf,MAAMa,UAAgBhG,YAClBC,SACI,OACI,yBAAK0B,UAAU,WACX,kBAAC,IAAD,KACI,oCACI,kBAAC,EAAD,MACA,kBAACsE,EAAA,EAAD,KACI,kBAAC9F,EAAA,EAAD,CAAO+F,KAAK,IAAIC,OAAK,EAACJ,UAAWxF,IACjC,kBAACJ,EAAA,EAAD,CAAO+F,KAAK,SAASH,UAAWxF,IAChC,kBAAC,EAAD,CAAoB2F,KAAK,iBAAiBH,UAAWtB,IACrD,kBAAC,EAAD,CAAoByB,KAAK,aAAaH,UAAWZ,IACjD,kBAAC,EAAD,CAAoBe,KAAK,SAASH,UAAWvD,IAC7C,kBAAC,EAAD,CAAoB0D,KAAK,UAAUH,UAAW1B,IAE9C,kBAAClE,EAAA,EAAD,CAAO4F,UAAW/B,KAEtB,kBAAC,EAAD,UAUTgC,Q,YC9Bf,MAAMI,UAAYpG,YAChBC,SACE,OACE,yBAAK0B,UAAU,OAEb,kBAAC,EAAD,QAmBOyE,QCrBKC,QACW,cAA7BzH,OAAO0H,SAASC,UAEe,UAA7B3H,OAAO0H,SAASC,UAEhB3H,OAAO0H,SAASC,SAASzB,MACvB,2DCZN0B,IAASvG,OAAO,kBAAC,EAAD,MAASwG,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxF,MAAKyF,IACjCA,EAAaC,kB","file":"static/js/main.2642e38f.chunk.js","sourcesContent":["/* For Best Practices https://facebook.github.io/create-react-app/docs/adding-custom-environment-variables*/\n//export const API_URL = 'http://localhost:5000'\nexport const API_URL = 'http://restapibackendfornodejsfrontend-env.eba-tpui9kui.us-east-1.elasticbeanstalk.com'\nexport const JPA_API_URL = `${API_URL}/jpa`","import axios from 'axios'\nimport { API_URL } from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()","import React, { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        if (AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props} />\n        } else {\n            return <Redirect to=\"/login\" />\n        }\n\n    }\n}\n\nexport default AuthenticatedRoute","import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass LoginComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: 'in28minutes',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        // this.handleUsernameChange = this.handleUsernameChange.bind(this)\n        // this.handlePasswordChange = this.handlePasswordChange.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n    }\n\n    handleChange(event) {\n        //console.log(this.state);\n        this.setState(\n            {\n                [event.target.name]\n                    : event.target.value\n            }\n        )\n    }\n\n    // handleUsernameChange(event) {\n    //     console.log(event.target.name);\n    //     this.setState(\n    //         {\n    //             [event.target.name]\n    //               :event.target.value\n    //         }\n    //     )\n    // }\n\n    // handlePasswordChange(event) {\n    //     console.log(event.target.value);\n    //     this.setState({password:event.target.value})\n    // }\n\n    loginClicked() {\n        //in28minutes,dummy\n        // if(this.state.username==='in28minutes' && this.state.password==='dummy'){\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/welcome/${this.state.username}`)\n        //     //this.setState({showSuccessMessage:true})\n        //     //this.setState({hasLoginFailed:false})\n        // }\n        // else {\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // }\n\n        // AuthenticationService\n        // .executeBasicAuthenticationService(this.state.username, this.state.password)\n        // .then(() => {\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //     this.props.history.push(`/welcome/${this.state.username}`)\n        // }).catch( () =>{\n        //     this.setState({showSuccessMessage:false})\n        //     this.setState({hasLoginFailed:true})\n        // })\n        AuthenticationService\n            .executeJwtAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch(() => {\n                this.setState({ showSuccessMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Login</h1>\n                <div className=\"container\">\n                    {/*<ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>*/}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                    {this.state.showSuccessMessage && <div>Login Sucessful</div>}\n                    {/*<ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/>*/}\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent","import axios from 'axios'\nimport { JPA_API_URL } from '../../Constants'\n\nclass TodoDataService {\n\n    retrieveAllTodos(name) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/todos`);\n    }\n\n    retrieveTodo(name, id) {\n        //console.log('executed service')\n        return axios.get(`${JPA_API_URL}/users/${name}/todos/${id}`);\n    }\n\n    deleteTodo(name, id) {\n        //console.log('executed service')\n        return axios.delete(`${JPA_API_URL}/users/${name}/todos/${id}`);\n    }\n\n    updateTodo(name, id, todo) {\n        //console.log('executed service')\n        return axios.put(`${JPA_API_URL}/users/${name}/todos/${id}`, todo);\n    }\n\n    createTodo(name, todo) {\n        //console.log('executed service')\n        return axios.post(`${JPA_API_URL}/users/${name}/todos/`, todo);\n    }\n\n}\n\nexport default new TodoDataService()","import React, { Component } from 'react'\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport moment from 'moment'\n\nclass ListTodosComponent extends Component {\n    constructor(props) {\n        console.log('constructor')\n        super(props)\n        this.state = {\n            todos: [],\n            message: null\n        }\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this)\n        this.updateTodoClicked = this.updateTodoClicked.bind(this)\n        this.addTodoClicked = this.addTodoClicked.bind(this)\n        this.refreshTodos = this.refreshTodos.bind(this)\n    }\n\n    componentWillUnmount() {\n        console.log('componentWillUnmount')\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate')\n        console.log(nextProps)\n        console.log(nextState)\n        return true\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount')\n        this.refreshTodos();\n        console.log(this.state)\n    }\n\n    refreshTodos() {\n        let username = AuthenticationService.getLoggedInUserName()\n        TodoDataService.retrieveAllTodos(username)\n            .then(\n                response => {\n                    //console.log(response);\n                    this.setState({ todos: response.data })\n                }\n            )\n    }\n\n    deleteTodoClicked(id) {\n        let username = AuthenticationService.getLoggedInUserName()\n        //console.log(id + \" \" + username);\n        TodoDataService.deleteTodo(username, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of todo ${id} Successful` })\n                    this.refreshTodos()\n                }\n            )\n\n    }\n\n    addTodoClicked() {\n        this.props.history.push(`/todos/-1`)\n    }\n\n    updateTodoClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/todos/${id}`)\n        // /todos/${id}\n        // let username = AuthenticationService.getLoggedInUserName()\n        // //console.log(id + \" \" + username);\n        // TodoDataService.deleteTodo(username, id)\n        //  .then (\n        //      response => {\n        //         this.setState({message : `Delete of todo ${id} Successful`})\n        //         this.refreshTodos()\n        //      }\n        //  )\n\n    }\n\n    render() {\n        console.log('render')\n        return (\n            <div>\n                <h1>List Todos</h1>\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Description</th>\n                                <th>Target Date</th>\n                                <th>IsCompleted?</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.todos.map(\n                                    todo =>\n                                        <tr key={todo.id}>\n                                            <td>{todo.description}</td>\n                                            <td>{moment(todo.targetDate).format('YYYY-MM-DD')}</td>\n                                            <td>{todo.done.toString()}</td>\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateTodoClicked(todo.id)}>Update</button></td>\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteTodoClicked(todo.id)}>Delete</button></td>\n                                        </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListTodosComponent","import React from 'react'\n\nfunction ErrorComponent() {\n    return <div>An Error Occurred. I don't know what to do! Contact support at abcd-efgh-ijkl</div>\n}\n\nexport default ErrorComponent","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport AuthenticationService from './AuthenticationService.js'\n\n\nclass HeaderComponent extends Component {\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        //console.log(isUserLoggedIn);\n\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"http://www.in28minutes.com\" className=\"navbar-brand\">in28Minutes</a></div>\n                    <ul className=\"navbar-nav\">\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/welcome/in28minutes\">Home</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>}\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default HeaderComponent","import React, { Component } from 'react'\n\nclass FooterComponent extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All Rights Reserved 2018 @in28minutes</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import React, { Component } from 'react'\n\nclass LogoutComponent extends Component {\n    render() {\n        return (\n            <>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank You for Using Our Application.\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import axios from 'axios'\nimport { API_URL } from '../../Constants'\n\nclass HelloWorldService {\n\n    executeHelloWorldService() {\n        //console.log('executed service')\n        return axios.get(`${API_URL}/hello-world`);\n    }\n\n    executeHelloWorldBeanService() {\n        //console.log('executed service')\n        return axios.get(`${API_URL}/hello-world-bean`);\n    }\n\n    executeHelloWorldPathVariableService(name) {\n        //console.log('executed service')\n        // let username = 'in28minutes'\n        // let password = 'dummy'\n\n        // let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n\n        return axios.get(`${API_URL}/hello-world/path-variable/${name}`\n            // , \n            //     {\n            //         headers : {\n            //             authorization: basicAuthHeader\n            //         }\n            //     }\n        );\n    }\n\n}\n\nexport default new HelloWorldService()","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport HelloWorldService from '../../api/todo/HelloWorldService.js'\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\n        this.state = {\n            welcomeMessage: ''\n        }\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n\n    render() {\n        return (\n            <>\n                <h1>Welcome!</h1>\n                <div className=\"container\">\n                    Welcome {this.props.match.params.name}.\n                    You can manage your todos <Link to=\"/todos\">here</Link>.\n                </div>\n                <div className=\"container\">\n                    Click here to get a customized welcome message.\n                    <button onClick={this.retrieveWelcomeMessage}\n                        className=\"btn btn-success\">Get Welcome Message</button>\n                </div>\n                <div className=\"container\">\n                    {this.state.welcomeMessage}\n                </div>\n\n            </>\n        )\n    }\n\n    retrieveWelcomeMessage() {\n        // HelloWorldService.executeHelloWorldService()\n        // .then( response => this.handleSuccessfulResponse(response) )\n\n        // HelloWorldService.executeHelloWorldBeanService()\n        // .then( response => this.handleSuccessfulResponse(response) )\n\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\n            .then(response => this.handleSuccessfulResponse(response))\n            .catch(error => this.handleError(error))\n    }\n\n    handleSuccessfulResponse(response) {\n        console.log(response)\n        this.setState({ welcomeMessage: response.data.message })\n    }\n\n    handleError(error) {\n\n        console.log(error.response)\n\n        let errorMessage = '';\n\n        if (error.message)\n            errorMessage += error.message\n\n        if (error.response && error.response.data) {\n            errorMessage += error.response.data.message\n        }\n\n        this.setState({ welcomeMessage: errorMessage })\n    }\n\n}\n\n\nexport default WelcomeComponent","import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\nclass TodoComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            description: '',\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n    }\n\n    componentDidMount() {\n\n        if (this.state.id === -1) {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUserName()\n\n        TodoDataService.retrieveTodo(username, this.state.id)\n            .then(response => this.setState({\n                description: response.data.description,\n                targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n            }))\n    }\n\n    validate(values) {\n        let errors = {}\n        if (!values.description) {\n            errors.description = 'Enter a Description'\n        } else if (values.description.length < 5) {\n            errors.description = 'Enter atleast 5 Characters in Description'\n        }\n\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = 'Enter a valid Target Date'\n        }\n\n        return errors\n\n    }\n\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        if (this.state.id === -1) {\n            TodoDataService.createTodo(username, todo)\n                .then(() => this.props.history.push('/todos'))\n        } else {\n            TodoDataService.updateTodo(username, this.state.id, todo)\n                .then(() => this.props.history.push('/todos'))\n        }\n\n        console.log(values);\n    }\n\n    render() {\n\n        let { description, targetDate } = this.state\n        //let targetDate = this.state.targetDate\n\n        return (\n            <div>\n                <h1>Todo</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ description, targetDate }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <ErrorMessage name=\"targetDate\" component=\"div\"\n                                        className=\"alert alert-warning\" />\n                                    <fieldset className=\"form-group\">\n                                        <label>Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodoComponent","import React, {Component} from 'react'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\nimport LoginComponent from './LoginComponent.jsx'\nimport ListTodosComponent from './ListTodosComponent.jsx'\nimport ErrorComponent from './ErrorComponent.jsx'\nimport HeaderComponent from './HeaderComponent.jsx'\nimport FooterComponent from './FooterComponent.jsx'\nimport LogoutComponent from './LogoutComponent.jsx'\nimport WelcomeComponent from './WelcomeComponent.jsx'\nimport TodoComponent from './TodoComponent.jsx'\n\nclass TodoApp extends Component {\n    render() {\n        return (\n            <div className=\"TodoApp\">\n                <Router>\n                    <>\n                        <HeaderComponent/>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\n                            <AuthenticatedRoute path=\"/todos/:id\" component={TodoComponent}/>\n                            <AuthenticatedRoute path=\"/todos\" component={ListTodosComponent}/>\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\n                            \n                            <Route component={ErrorComponent}/>\n                        </Switch>\n                        <FooterComponent/>\n                    </>\n                </Router>\n                {/*<LoginComponent/>\n                <WelcomeComponent/>*/}\n            </div>\n        )\n    }\n}\n\nexport default TodoApp","import React, { Component } from 'react';\n//import FirstComponent from './components/learning-examples/FirstComponent'\n//import SecondComponent from './components/learning-examples/SecondComponent'\n//import ThirdComponent from './components/learning-examples/ThirdComponent'\n//import Counter from './components/counter/Counter'\nimport TodoApp from './components/todo/TodoApp'\nimport './App.css';\nimport './bootstrap.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/*<Counter/>*/}\n        <TodoApp />\n      </div>\n    );\n  }\n}\n\n// class LearningComponents extends Component {\n//   render() {\n//     return (\n//       <div className=\"LearningComponents\">\n//          My Hello World\n//          <FirstComponent></FirstComponent>\n//          <SecondComponent></SecondComponent>\n//          <ThirdComponent></ThirdComponent>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}